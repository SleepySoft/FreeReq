我使用pyqt5，有一个QTextEdit，名为self.__text_md_editor，我希望它能接受文件拖入或者图片粘贴。如果是文件拖入，给用户三个选项：
1.将文件复制到attachment目录下（默认），如果存在同名文件，则弹出输入框要求用户改名（默认输入内容是一个随机UUID），直到名字不冲突为止。
2.直接链接到文件
3.取消
如果是图片粘贴，则弹出输入框要求用户给图片命名（默认输入内容是一个随机UUID），直到名字不冲突为止。将剪贴版中的图片以此名字保存到attachment目录下。
生成一段markdown文本，链接到对应的文件。


我使用pyqt5，有一个QTextEdit，名为self.__text_md_editor，我希望它能接受文件拖入，并给用户三个选项：
1.将文件复制到attachment目录下（默认），如果存在同名文件，则弹出输入框要求用户改名（默认输入内容是一个随机UUID），直到名字不冲突为止。
2.直接链接到文件
3.取消
生成一段markdown文本，链接到该文件，并将这段文本插入到光标所在位置。


我使用pyqt5，有一个QTextEdit，名为self.__text_md_editor。
我希望它能接受文件图片粘贴，并弹出输入框要求用户给图片命名（默认输入内容是一个随机UUID），直到名字不冲突为止。
将剪贴版中的图片以此名字保存到attachment目录下，生成一段markdown文本，引用对应的图片。



请完成TODO中的代码，将其中的相对路径转换为QWebEngineView能识别的绝对路径。包括src和href中的相对路径，但不要转换非相对路径的url。
把req_root_path加到相对路径前面，并把'\\'转换为'/'。

def on_text_content_edit(self):
    md_text = self.__text_md_editor.toPlainText()
    html_text = self.render_markdown(md_text)
    html_text = html_text.replace('strike>', 'del>')
    # self.__text_md_viewer.setMarkdown(text)
    req_root_path = self.__req_data_agent.get_req_root()
    if isinstance(self.__text_md_viewer, QWebEngineView):
        # TODO: Parse the url in html_text as abs path like: file:///
        pass
    self.__text_md_viewer.setHtml(html_text)
    self.on_content_changed()




我有一个refactor_result列表，里面的内容是多个[distance, key]，其中key有重复。
我需要整理这个列表，使得其中key不重复，且distance为该key最小的distance。
返回值按distance从小到大排序。




使用python实现一个函数：average_split_text(text: str, threshold: int, tolerance: float)
如果text的长度小于threshold * (1 + tolerance)，则不分割。
否则将文本分割为不大于threshold且均匀的部分。
最后返回结果列表。




使用Python写一个窗口：IndexListUI，它包含一个列表控件，名为index_list，包含两列：Title和ID，单行且整行选择。
窗口初始大小为300 * 600并出现在屏幕右下角。
无最大最小化按钮。当用户点击关闭时，窗口隐藏，下次显示时保持隐藏之前的位置。
提供接口append_index和clear_index，前者接受title，和index作为参数，均为str。将其加入index_list。
当用户点击index_list中的一行，响应事件，并取出index备用。





使用pyqt5写一个聊天窗口类，上方为一个占高度80%的对话记录框，只读，下方为一个多行输入框和一个发送按钮。
该类会创建一个线程，在后台做额外的工作（TODO）
当用户输入内容并点击“发送”时，输入内容会发送到线程中处理（标记为TODO），并清空输入框。
在线程中，当收到输入内容时，将输入内容追加到历史列表并追加到对话记录框中（考虑多线程操作UI的问题）。
注意：该窗口并非主程序窗口，当程序退出时，该类需要优雅地退出线程。




写一段python代码，将pyqt5的QWebEngineView及QTextEdit中的富文本或HTML页面发送到打印。
需要展示打印预览页面，在打印预览页面中选择打印机并提供执行打印的按钮。




写一个弹出框，提示用户：已打印到output.pdf，请在打开的pdf中进行另存或打印的操作。使用英文。


使用python写一个类叫做EasyConfig，构造函数参数为(config_file: str='config.json', key_splitter: str='.')作为参数。
构造时自动载入对应json文件并将其保存在dict中。
实现set(key: str, value: Any)和get(key: str, default: Any=None)接口。当调用set时，更新dict并将dict保存到文件中。
使用key_splitter指定的分隔符分隔key，按分隔的key做为层级访问dict对应的值。
在set的时候，如果某一个非最后层级的key对应的值不存在，则将其设为dict；如果一个非最后层级的key对应的值非dict，则返回False。
在get的时候，如果目标不是dict或dict没有这个值，返回default。

为这个类增加restore功能，清空dict并保存。


使用pyqt5写一个为ScratchPaper的窗口，中心是一个多行的编辑框，支持常用的编辑快捷键。窗口可以自由调整大小，点击关闭按钮隐藏。
该窗口初始化时载入scratch.txt并显示，一旦用户对文本框内容有修改，则触发保存。
注意并非有修改即保存，而是置上标记，每2秒钟执行一次保存。




这里有段代码：

class MarkdownStyle:
    def __init__(self):
        self.style_selector = QComboBox()

    def scan_style_files(self):
        pass

    def on_style_selector_changed(self):
        pass

我希望这个combobox只能选择，不能编辑。
将选择变化的事件连接到on_style_selector_changed上。
能不能添加一个函数响应用户点击下拉框？在那里调用scan_style_files并更新combobox。





实现scan_style_files，扫描本文件同目录下的MarkdownStyle文件夹，列出其中所有的css文件，并更新到combobox上。
在on_style_selector_changed中得到选择的内容，并且打开对应的文件，读取里面的内容。另外这个文件夹可能不存在，要做好异常管理。




写一个python函数，从markdown文本中寻找引用的资源，并返回它的路径或url。



帮我完成这个函数：
    def refresh_resource_table(self):
        req_resource = self.search_req_resource()
        attachment_resource = self.search_attachment_file()
其中req_resource是一个dict，key是requirement文档的uuid，value是这个req内容中包含中包含的资源列表，
而attachment_resource则是attachment目录中的文件。

将这些内容更新到一个QTableWidget控件中，这个控件有三列：UUID，Resource，Status。
其中：
    UUID列为req_resource的key
    Resource为req_resource的value的一项。如果一个文档有多个resource，则显示多列，它们的UUID列值相同。资源名同时是一个链接，用户点击后调用系统命令打开该文件（可执行文件除外）。
    Status列的规则是：
        """
        如果资源出在在文档中，同时在attachment_resource中，则显示'OK'；
        如果资源出现在文档中，但不在attachment_resource中，则显示'Invalid'；
        如果资源出现attachment_resource中，但没在文档中引用，则显示'No Reference'。
        """

同时给出主界面的初始化函数，要求包含上面的QTableWidget，并且下下有两个按钮，一个为'Refresh'，另一个名为'Auto Clear'。
点击'Refresh'按钮，调用self.refresh_resource_table()刷新界面
点击'Auto Clear'按钮，用英文提示用户“本操作会删除所有未被引用的资源文件，是否确认”，并在提示中列出所有将删除的文件。用户确认，则将没在文档中引用的文件删除。并刷新列表。




请补全TODO处的代码，用以根据下面参考代码中的id_prefixes添加子菜单。当子菜单被点击时，调用响应函数，并将id_prefix传入该函数。
在该函数中需要弹出确认窗口（英文）：”该操作会为该项及其子项自动分配Req ID，已存在ID的项目不受影响。\n是否确认？“

"""
    def on_requirement_tree_menu(self, pos: QPoint):
        menu = QMenu()
        sel_index: QModelIndex = self.__tree_requirements.indexAt(pos)
        if sel_index is not None and sel_index.isValid():
            menu.addAction('Append Child', self.on_requirement_tree_menu_append_child)
            # TODO: Add submenu
            menu.addAction('Batch Assign Req ID', self.on_requirement_tree_menu_assign_req_id)
            menu.addSeparator()
"""

参考代码：

"""
    def on_button_re_assign_id(self):
        id_prefixes = self.__req_data_agent.get_req_meta().get(STATIC_META_ID_PREFIX, [])

        if len(id_prefixes) == 0:
            QMessageBox.information(self, 'No ID Define', 'Please define the ID prefix in mete data first.')
            return

        if len(id_prefixes) == 1:
            self.on_menu_assign_id(id_prefixes[0])
            self.update_content_edited_status(True)
        else:
            menu = QMenu()
            for id_prefix in id_prefixes:
                menu.addAction(id_prefix, partial(self.on_menu_assign_id, id_prefix))
            menu.exec(QCursor.pos())

    def on_menu_assign_id(self, id_prefix: str):
        req_id = self.__req_data_agent.new_req_id(id_prefix)
        self.__line_id.setText(req_id)
        self.update_content_edited_status(True)
"""



记住下面我提供的代码，按我的要求对代码进行重构，知道就说“好的”。



这个窗口是基于QWidget的，我希望将其重构为基于QMainWindow的窗口。
需要包含菜单，包括常用的菜单项和子菜单项，如：File, Edit，View，About等，菜单初始化代码单独放一个函数。
QTreeView作为QDockWidget，默认放置在左侧。其它子窗口布局不变。
QTreeView要求可以任意贴边，且能关闭后通过View菜单下的子菜单将其重新打开，该子菜单需要根据对应窗口的实际显示情况打勾。


这里有一段代码，我希望在dock_tree_requirements关闭的时候及时更新菜单勾选状态。应该怎么做？

如何给QMainWindow下方增加状态栏并更新其显示。

